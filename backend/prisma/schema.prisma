// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Family represents a household
model Family {
  id              Int      @id @default(autoincrement())
  name            String
  createdDate     DateTime @default(now()) @map("created_date")
  primaryParentId Int      @map("primary_parent_id")

  // Relations
  users       User[]
  chores      Chore[]
  assignments Assignment[]

  @@map("families")
}

// User represents both parents and children
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role
  familyId  Int      @map("family_id")
  birthdate String // Stored as string in YYYY-MM-DD format
  createdBy Int?     @map("created_by") // User ID of who created this user
  lastLogin DateTime @map("last_login")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  family        Family               @relation(fields: [familyId], references: [id])
  assignments   Assignment[]
  magicTokens   MagicToken[]
  webauthnCreds WebAuthnCredential[]
  createdUsers  User[]               @relation("UserCreatedBy")
  creator       User?                @relation("UserCreatedBy", fields: [createdBy], references: [id])

  @@map("users")
}

// Chore represents a task that can be assigned
model Chore {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  difficulty     Difficulty @default(easy)
  category       String?
  isRecurring    Boolean    @default(false) @map("is_recurring")
  recurrenceDays String?    @map("recurrence_days") // JSON array: ["monday","wednesday","friday"]
  familyId       Int        @map("family_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Relations
  family           Family            @relation(fields: [familyId], references: [id])
  assignmentChores AssignmentChore[]

  @@map("chores")
}

// Assignment is a weekly collection of chores assigned to a child
model Assignment {
  id        Int              @id @default(autoincrement())
  childId   Int              @map("child_id")
  startDate String           @map("start_date") // YYYY-MM-DD format (always Sunday)
  endDate   String?          @map("end_date") // YYYY-MM-DD format (always Saturday)
  status    AssignmentStatus @default(assigned)
  notes     String?
  familyId  Int              @map("family_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  child            User              @relation(fields: [childId], references: [id])
  family           Family            @relation(fields: [familyId], references: [id])
  assignmentChores AssignmentChore[]

  @@map("assignments")
}

// Junction table linking assignments to chores
model AssignmentChore {
  id           Int         @id @default(autoincrement())
  assignmentId Int         @map("assignment_id")
  choreId      Int         @map("chore_id")
  status       ChoreStatus @default(pending)
  completedOn  String?     @map("completed_on") // Day of week when completed
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  chore      Chore      @relation(fields: [choreId], references: [id])

  @@unique([assignmentId, choreId])
  @@map("assignment_chores")
}

// MagicToken for passwordless authentication
model MagicToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("magic_tokens")
}

// WebAuthn credentials for advanced authentication
model WebAuthnCredential {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  credentialId String   @unique @map("credential_id")
  publicKey    String   @map("public_key")
  deviceName   String   @map("device_name")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("webauthn_credentials")
}

// Enums
enum Role {
  parent
  child
}

enum Difficulty {
  easy
  medium
  hard
}

enum AssignmentStatus {
  assigned
  in_progress
  completed
  missed
}

enum ChoreStatus {
  pending
  completed
  skipped
}
