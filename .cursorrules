# Family Chores Management App - Cursor Rules

## Project Overview

Full-stack family chores management application with Node.js/Express backend and React/TypeScript frontend.

## Project Structure

```
chores/
├── backend/           # Node.js Express API server
│   ├── app.js         # Express app setup & configuration
│   ├── index.js       # Server entry point
│   ├── config/        # Configuration files
│   │   └── server.js  # Server configuration
│   ├── middleware/    # Custom middleware
│   │   ├── logger.js  # Request logging
│   │   └── json-only.js # JSON-only API validation
│   ├── routes/        # API route handlers
│   │   ├── index.js   # Main API routes
│   │   ├── basic.js   # Health & documentation routes
│   │   ├── children.js
│   │   ├── chores.js
│   │   └── assignments.js
│   └── tests/         # Jest test files
├── frontend/          # React TypeScript app (when created)
└── .gitignore         # Shared gitignore for monorepo
```

## Technology Stack

### Backend

- **Runtime**: Node.js
- **Framework**: Express.js 5.x
- **Language**: JavaScript (not TypeScript initially)
- **Database**: SQLite (planned)
- **Testing**: Jest + Supertest
- **CORS**: Enabled for frontend integration

### Frontend (Planned)

- **Framework**: React with TypeScript
- **Styling**: Styled Components (no Tailwind CSS)
- **Build**: Create React App with TypeScript template
- **Package Manager**: npm (not pnpm due to previous conflicts)

## API Design Standards

### Core Models

1. **Children**

   ```json
   {
     "id": number,
     "name": string,
     "birthdate": "YYYY-MM-DD",
     "total_points": number
   }
   ```

2. **Chores**

   ```json
   {
     "id": number,
     "title": string,
     "description": string,
     "difficulty": "easy|medium|hard",
     "points": number,
     "is_recurring": boolean,
     "recurrence_pattern": "daily|weekly|monthly|custom"
   }
   ```

3. **Assignments**
   ```json
   {
     "id": number,
     "child_id": number,
     "chore_id": number,
     "assigned_date": "YYYY-MM-DD",
     "due_date": "YYYY-MM-DD",
     "status": "pending|in_progress|completed|overdue",
     "completed_date": "YYYY-MM-DD" | null
   }
   ```

### API Endpoints

- **Children**: `/api/children` (GET, POST, PUT, DELETE)
- **Chores**: `/api/chores` (GET, POST, PUT, DELETE)
- **Assignments**: `/api/assignments` (GET, POST, PUT, PATCH, DELETE)
- **Dashboard**: `/api/dashboard/stats`
- **Health**: `/health`
- **Root**: `/` (API documentation)

### API Security & Standards

- **JSON-Only**: All `/api/*` endpoints require `Accept: application/json`
- **Content-Type**: POST/PUT/PATCH require `Content-Type: application/json`
- **Error Codes**: 406 for wrong Accept, 415 for wrong Content-Type
- **Response Format**: Always return `{ success: boolean, data?, error?, message? }`

## Code Style & Standards

### JavaScript/TypeScript

- **Quotes**: Double quotes `"` preferred
- **Semicolons**: Required
- **Trailing Commas**: Always include
- **Line Length**: Reasonable breaks for readability
- **Async/Await**: Prefer over Promises.then()

### File Naming

- **Backend**: kebab-case for files, camelCase for variables
- **Frontend**: PascalCase for components, camelCase for utilities
- **Tests**: `*.test.js` in `tests/` directory

### Git Standards

- **Commits**: Clear, descriptive messages
- **Branches**: Use feature branches for new functionality
- **Ignore**: Comprehensive `.gitignore` for Node.js, React, and databases

## Development Workflow

### Current Phase: Backend Development

1. ✅ Basic Express server with JSON-only middleware
2. ✅ Mock API endpoints for all models
3. ✅ Comprehensive test suite for API functionality
4. 🔄 Database integration (SQLite)
5. ⏳ Frontend React app creation
6. ⏳ API integration between frontend/backend

### Testing Requirements

- **Backend**: Jest + Supertest for all API endpoints
- **Coverage**: Focus on API validation, error handling, business logic
- **Test Data**: Use consistent mock data across tests
- **Commands**: `npm test` to run all tests

### Database (When Implemented)

- **Type**: SQLite for simplicity
- **ORM**: Consider simple query builder or raw SQL
- **Migrations**: Simple schema files
- **Location**: `backend/database.sqlite` (gitignored)

## Developer Profile & Assistance Guidelines

### User Experience Level

**CRITICAL: This developer is a STAFF-LEVEL FRONTEND DEVELOPER** 🎯

- ✅ **Frontend Expertise**: React, TypeScript, styled-components, modern frontend patterns
- ✅ **Strong Skills**: Component architecture, state management, UI/UX, testing
- ❌ **Needs Help With**: Backend development (Node.js, Express, databases, APIs, authentication)
- ❌ **Don't Explain**: Basic React concepts, TypeScript usage, frontend best practices

### How to Assist This Developer

**DO:**

- 🎯 **Focus on backend concepts** - Node.js, Express, databases, API design
- 🔧 **Explain server-side patterns** - middleware, authentication, error handling
- 📚 **Provide backend examples** - route handlers, database queries, security
- 🚀 **Suggest backend improvements** - performance, architecture, DevOps
- 💡 **Explain backend debugging** - server logs, API testing, database issues

**DON'T:**

- ❌ **Explain basic frontend concepts** - they already know React/TypeScript very well
- ❌ **Suggest basic UI improvements** - they have strong frontend skills
- ❌ **Over-explain JavaScript fundamentals** - focus on backend-specific JS patterns
- ❌ **Assume they need frontend architecture help** - they're already expert-level

### Communication Style

- **Backend-focused explanations** with depth and technical detail
- **Assume frontend competence** and focus on backend learning
- **Practical examples** for backend concepts they're still learning

## AI Assistant Guidelines

### **🏢 ENTERPRISE-READY REQUIREMENT**

**CRITICAL: Everything developed for this project MUST be enterprise-ready.**

- ⚠️ **MANDATORY**: Read `ai-docs/ENTERPRISE_STANDARDS.md` before making ANY changes
- ⚠️ **MANDATORY**: Read `ai-docs/.agent-notes.md` for critical agent instructions
- ✅ **90%+ test coverage** required (currently: 110+ comprehensive tests)
- ✅ **Production-grade security** (proper auth, validation, error handling)
- ✅ **Professional documentation** (complete guides, API docs, troubleshooting)
- ✅ **TypeScript with full type safety** (no `any` types in production code)
- ✅ **CI/CD ready** (automated testing, proper exit codes, workspace config)

**This is NOT a prototype or hobby project - it's enterprise-grade software.**

### Server Management Policy

**CRITICAL: AI assistants must NEVER start servers directly.**

- ❌ **DO NOT** run `npm start`, `npm run dev`, `pnpm dev`, or any server commands
- ❌ **DO NOT** start backend or frontend servers using any method
- ❌ **DO NOT** run commands that start long-running processes
- ✅ **DO** help diagnose server issues and suggest solutions
- ✅ **DO** suggest commands for the USER to run themselves
- ✅ **DO** check what processes are using ports (e.g., `lsof -ti:3001`)
- ✅ **DO** help kill processes blocking ports if requested

### Why This Policy Exists

1. **Prevents Confusion**: Multiple agents starting servers creates port conflicts
2. **User Control**: Developer maintains full control over their environment
3. **Clear Boundaries**: Agent focuses on code, user manages processes
4. **Debugging**: Easier to troubleshoot when user controls server lifecycle

### Acceptable Server-Related Actions

- Reading configuration files (`package.json`, `nodemon.json`, etc.)
- Analyzing server code for issues (`index.js`, `app.js`, etc.)
- Checking port availability (`lsof -ti:PORT`)
- Suggesting environment variables or configuration changes
- Helping with server setup and configuration
- Writing/editing server code and middleware

### Communication Guidelines

When server issues arise:

- Clearly state what the user should run: `"You should run: pnpm dev:backend"`
- Explain the expected outcome: `"This will start the backend on port 3001"`
- Provide troubleshooting steps: `"If you get EADDRINUSE, run: lsof -ti:3001"`
- Focus on diagnosis, not execution

## Key Decisions Made

### Technical Choices

1. **Monorepo Structure**: Single repo with backend/frontend separation
2. **JavaScript over TypeScript**: For backend simplicity initially
3. **Styled Components**: Chosen over Tailwind CSS for frontend
4. **Express 5.x**: Latest stable version
5. **JSON-Only API**: Strict content negotiation for API endpoints

### Architecture Decisions

1. **RESTful Design**: Standard HTTP methods and status codes
2. **Separation of Concerns**: Routes, controllers, models separate
3. **Error Handling**: Consistent error response format
4. **Incremental Development**: Small steps, test each phase
5. **Modular Structure**: Middleware, config, and routes in separate files
6. **Single Responsibility**: Each file has one clear purpose

### Avoided Technologies

- **TypeScript**: Not used in backend initially (caused complexity)
- **Tailwind CSS**: Replaced with Styled Components
- **pnpm**: Caused ESLint conflicts, stick with npm
- **Complex ORMs**: Keep database layer simple

## Future Development Guidelines

### When Adding New Features

1. **API First**: Design endpoint before implementation
2. **Test Driven**: Write tests before or alongside code
3. **Documentation**: Update this file and API docs
4. **Incremental**: Small, testable changes

### When Making Changes

1. **Backward Compatibility**: Don't break existing API contracts
2. **Database Migrations**: Plan schema changes carefully
3. **Error Handling**: Maintain consistent error responses
4. **Security**: Validate all inputs, maintain JSON-only policy

### Code Quality

1. **Linting**: Fix linting errors before committing
2. **Testing**: Maintain high test coverage
3. **Performance**: Monitor API response times
4. **Security**: Regular dependency updates

## Common Commands

### Backend Development

```bash
cd backend
npm install          # Install dependencies
npm start           # Start server (production)
npm run dev         # Start server (development)
npm test            # Run test suite
```

### Frontend Development (When Created)

```bash
cd frontend
npm install          # Install dependencies
npm start           # Start dev server
npm test            # Run tests
npm run build       # Build for production
```

## Environment Setup

- **Node.js**: v18+ recommended
- **npm**: Latest stable version
- **Port**: Backend runs on 3001, frontend on 3000 (when created)

---

_Last Updated: September 2025_
_Project Status: Backend API Complete, Database Integration In Progress_
